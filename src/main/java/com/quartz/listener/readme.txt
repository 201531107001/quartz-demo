 实现 Quartz  监 听器
在某个所关注事件发生时，监听器提供了一种方便且非侵入性的机制来获得这一通知。Quartz 提供了三种类型的监听器：监听
Job 的，监听  Trigger  的，和监听 Scheduler 自已的。本章解释如何应用每一种类型来更好的管理你的 Quartz 应用，并获悉到
什么事件正在发生。

.  实现监 听
在接下来的讨论中，实现监听器的方法通用于所有的三种类型。可以分成以下步骤：
1. 创建一个 Java 类，实现监听器接口
2. 用你的应用中特定的逻辑实现监听器接口的所有方法
3. 注册监听器

· 创 建 监 听器 类
监听器是一个 Java 接口，它必须由一个具体类来实现。你也不需要只为这个目的创建一个专门的类；它可以是任何一个你希望能
接收到方法回调的类。为符合良好的程序设计，你应当注意保持高内聚和松耦合性。认真的考虑哪个类你决定用于实现监听器类；
这从总体设计的视角来看是很重要的
.实现监 听器方法
因为监听器是普通的 Java 接口，每个方法都必须在你的监听器实现类中实现。假如有一些监听器接口方法你不感兴趣，允许你使
用空的方法体；只是，你仍必须提供一个有效的方法实现它
· 注 册 监 听器
要接收到方法回调，Scheduler 必须能获知监听实例

全局之于非全局 监 听器
JobListener 和  TriggerListener 可被注册为全局或非全局监听器。一个全局监听器能接收到所有的 Job/Trigger 的事件通知。
而一个非全局监听器(或者说是一个标准的监听器) 只能接收到那些在其上已注册了监听器的 Job 或  Triiger  的事件

 监 听  Job  事件
org.quartz.JobListener 接口包含一系列的方法，它们会由 Job 在其生命周期中产生的某些关键事件时被调用。


 监 听  Trigger  事件
正如 JobListener,  org.quartz.TriggerListener 接口也包含一系列给 Scheduler 调用的方法。然而，与 JobListener 有所不
同的是，  TriggerListener 接口还有关于  Trigger  实例生命周期的方法。



















